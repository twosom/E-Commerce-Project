plugins {
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.siouan.frontend-jdk11' version '5.2.0'
    id "org.siouan.frontend" version "3.0.2"
}


def preinstalledNodeDistributionDirectory = file("${projectDir}/src/main/resources/static/node")

apply plugin: 'org.siouan.frontend-jdk11'

frontend {
    nodeDistributionProvided = false

    nodeInstallDirectory = file("${projectDir}/src/main/resources/static/node")

    packageJsonDirectory = file("${projectDir}/src/main/resources/static")

    nodeVersion = '16.0.0'

    assembleScript = 'run build'

    cleanScript = 'run clean'

    checkScript = 'run check'

}

group = 'io.twosom'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // THYMELEAF_EXTRAS
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    // MODEL_MAPPER
    implementation 'org.modelmapper:modelmapper:2.4.4'

    // SPRING_BOOT_STARTER_VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // QUERY_DSL
    implementation 'com.querydsl:querydsl-jpa'


}

test {
    useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

test {
    useJUnitPlatform()
}
//querydsl 추가 끝
